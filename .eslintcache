[{"D:\\Users\\co02047\\lex-ui-connect-demo\\lex-ui-connect-demo\\src\\index.js":"1","D:\\Users\\co02047\\lex-ui-connect-demo\\lex-ui-connect-demo\\src\\app\\App.js":"2","D:\\Users\\co02047\\lex-ui-connect-demo\\lex-ui-connect-demo\\src\\components\\chat\\Maximized.js":"3","D:\\Users\\co02047\\lex-ui-connect-demo\\lex-ui-connect-demo\\src\\components\\chat\\Minimized.js":"4","D:\\Users\\co02047\\lex-ui-connect-demo\\lex-ui-connect-demo\\src\\components\\chat\\QuickReplies.js":"5","D:\\Users\\co02047\\lex-ui-connect-demo\\lex-ui-connect-demo\\src\\components\\spinner\\Spinner.js":"6"},{"size":294,"mtime":1608062858000,"results":"7","hashOfConfig":"8"},{"size":6512,"mtime":1636999968000,"results":"9","hashOfConfig":"8"},{"size":9849,"mtime":1637000238000,"results":"10","hashOfConfig":"8"},{"size":644,"mtime":1608141244000,"results":"11","hashOfConfig":"8"},{"size":666,"mtime":1608857674000,"results":"12","hashOfConfig":"8"},{"size":301,"mtime":1603917760000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"gz5qc2",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Users\\co02047\\lex-ui-connect-demo\\lex-ui-connect-demo\\src\\index.js",[],["29","30"],"D:\\Users\\co02047\\lex-ui-connect-demo\\lex-ui-connect-demo\\src\\app\\App.js",[],"D:\\Users\\co02047\\lex-ui-connect-demo\\lex-ui-connect-demo\\src\\components\\chat\\Maximized.js",["31","32"],"import React, {useState, useEffect, useRef}  from 'react';\r\nimport logo from './logo.png';\r\nimport logo2 from './logo2.png';\r\nimport moment from 'moment';\r\nimport {\r\n\tTitleBar,\r\n\tMessageList,\r\n\tMessage,\r\n\tMessageText,\r\n\tMessageGroup,\r\n\tTextComposer,\r\n\tRow,\r\n\tFill,\r\n\tIconButton,\r\n    CloseIcon,\r\n    SendIcon,\r\n    Bubble,\r\n    // QuickReplies,\r\n} from '@livechat/ui-kit'\r\nimport QuickReplies from './QuickReplies'\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nconst Maximized = ({\r\n\tminimize,\r\n\tmessages,\r\n\thandleMessage,\r\n    addMessages,\r\n    handleWrapupMessage,\r\n    handleWraupRating,\r\n    handleSkipAccountNumber,\r\n    onCloseClick,\r\n}) => {\r\n    let currentReplies = useRef([]);\r\n    const [message, setMessage] = useState('');\r\n    \r\n    useEffect(() => {\r\n         const messageGroup = document.getElementById('messageGroup');\r\n        if(messageGroup) {\r\n            if(localStorage.getItem('textContent') !== '') {\r\n                document.getElementById('messageText').value = localStorage.getItem('textContent');\r\n            }\r\n            else {\r\n                document.getElementById('messageText').value = message;\r\n            }\r\n            messageGroup.lastChild.lastElementChild.scrollIntoView({behavior: 'smooth', block:'end'});\r\n            console.log(document.getElementById('messageText').value);\r\n            if(document.getElementById('messageText').value === 'null'){\r\n                document.getElementById('messageText').value = '';\r\n            }\r\n        }\r\n    }, [messages]);\r\n    \r\n    useEffect(() => {\r\n        if(messages.length === 0 ) {\r\n            handleMessage({text:'Hi', value:'Hi'}, false)\r\n        }\r\n    }, []);\r\n    \r\n    const handleChange = (e) => {\r\n        if(e){\r\n            setMessage(e.target.value);\r\n            localStorage.setItem('textContent', e.target.value);\r\n        }\r\n    }\r\n    \r\n    const closeEvent = () => {\r\n        onCloseClick();\r\n        localStorage.removeItem('textContent', '');\r\n    }\r\n    window.onbeforeunload = (e) => {\r\n        localStorage.removeItem('textContent');\r\n    }\r\n    const quickReplySelected = (optionText, optionValue) => {\r\n        if(optionValue.toLowerCase().startsWith('http')){\r\n            window.open(optionValue);\r\n        } \r\n        else if(optionValue.toLowerCase().startsWith('tel:')) {\r\n            window.open(optionValue);\r\n        }\r\n        else if(optionValue.toLowerCase().startsWith('mailto:')) {\r\n            window.open(optionValue);\r\n        }\r\n        else {\r\n                handleMessage({text:optionText,value:optionValue}, true);\r\n        }\r\n    }\r\n\r\n    const showQuickReplies = (responseCard) => {\r\n        let options = [];\r\n        if (responseCard.genericAttachments[0].buttons){\r\n            currentReplies.current =  [...currentReplies.current, ...responseCard.genericAttachments[0].buttons];\r\n            responseCard.genericAttachments[0].buttons.map( button => options.push({text:button.text, value:button.value}));\r\n            return (           \r\n                    <QuickReplies options = {options} onSelect={quickReplySelected}/>     \r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    const handleKeyDown = (event) => {\r\n        if(event.keyCode === 13){\r\n            event.preventDefault();\r\n            localStorage.removeItem('textContent');\r\n            const messageText = event.target.value;\r\n            if(messageText !== ''){\r\n                if( messages[messages.length-1].message === 'Account Number (optional)' ){\r\n                    let textMessage = messageText;\r\n                    textMessage = textMessage.replace(/\\d(?=\\d{4})/g, \"X\");\r\n                    handleMessage({text:textMessage,value:messageText}, true);\r\n                }\r\n                else {\r\n                    handleMessage({text:messageText,value:messageText}, true);\r\n                }\r\n                setMessage('');\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const handleSendButtonClick = () => {\r\n        localStorage.removeItem('textContent');\r\n        if( message !== ''){\r\n            if( messages[messages.length-1].message === 'Account Number (optional)' ){\r\n                let textMessage = message;\r\n                textMessage = textMessage.replace(/\\d(?=\\d{4})/g, \"X\");\r\n                handleMessage({text:textMessage, value:message}, true);\r\n            }\r\n            else {\r\n                handleMessage({text:message, value:message}, true);\r\n            }\r\n            setMessage('');\r\n        }\r\n    }\r\n\r\n    const bubbleOwnStyle = {\r\n        width: '-webkit-fill-available',\r\n        background: '#ffffff',\r\n        color: '#000',\r\n        border: '0.5px solid #555858',\r\n        borderRadius: '13px 13px 13px 4px',\r\n        padding: '10px 13px 9px 10px !important',\r\n    }\r\n\r\n    const bubbleBotStyle = {\r\n        background: '#555858',\r\n        border: '1px solid #555858',\r\n        opacity: '1',\r\n        marginBottom: '4px',\r\n        display: 'inline-block',\r\n        borderRadius: '13px 13px 4px 13px',\r\n        color: '#ffffff',\r\n        textAlign: 'left',\r\n        padding: '10px 12px 9px 15px !important'\r\n    }\r\n    const bubbleBotContainerStyle = {\r\n        width: '88%',\r\n    }\r\n    const bubbleOwnContainerStyle = {\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    };\r\n\treturn (\r\n\t\t<div className='main-container'>\r\n            <TitleBar\r\n        rightIcons={[\r\n          <div\r\n            style={{\r\n              display: 'inline-flex',\r\n            }}\r\n          >\r\n            <IconButton\r\n              key='minimize'\r\n              onClick={minimize}\r\n              style={{\r\n                padding: '0',\r\n                marginRight: '15px',\r\n              }}\r\n              aria-label='minimize'\r\n            >\r\n              <i\r\n                class='material-icons'\r\n                style={{\r\n                  color: 'rgb(102 28 105 / 0.70)',\r\n                }}\r\n              >\r\n                horizontal_rule\r\n              </i>\r\n            </IconButton>\r\n            <IconButton\r\n              key='close'\r\n              onClick={minimize}\r\n              style={{\r\n                padding: '0',\r\n              }}\r\n              aria-label='close'\r\n            >\r\n              <CloseIcon\r\n                className='svg-custom'\r\n                color='#661C69'\r\n                onClick={closeEvent}\r\n                style={{\r\n                  width: '20px',\r\n                  height: '20px',\r\n                }}\r\n              />\r\n            </IconButton>\r\n          </div>,\r\n        ]}\r\n        title={[\r\n          <h1\r\n            style={{\r\n              fontSize: '24px',\r\n              marginBottom: '-4px',\r\n              marginTop: '0',\r\n              marginLeft: '60px'\r\n            }}\r\n          >\r\n            Chat\r\n          </h1>,\r\n        ]}\r\n      />\r\n\r\n        <div style={{background:'#ffffff', textAlign: 'center', padding: '5px'}}>\r\n            <img src={logo} alt='oriental chat logo' width='70' height='70' tabIndex=\"0\" />\r\n        </div>  \r\n\r\n        <div style={{textAlign: 'center', font: 'normal normal normal 12px/15px Arial',\r\n            letterSpacing: '0', color: '#000000', opacity: '1' }} >\r\n                <span>{moment().format(\"ddd, h:mm A\")}</span>\r\n        </div>\r\n        <div id=\"messageList\" \r\n            style={{\r\n                flexGrow: 1,\r\n                minHeight: 0,\r\n                height: '100%',\r\n            }}\r\n        >\r\n            <MessageList active containScrollInSubtree style={{\r\n            background: '#fff',\r\n            padding: '0',\r\n          }}>\r\n            \r\n               {messages.length > 0 &&  <MessageGroup id='messageGroup' onlyFirstWithMeta>\r\n                   {\r\n                    messages.map(message => (\r\n                        \r\n                        message.message !== '' ?\r\n                        <Message isOwn={message.isOwn} className=\"message-container\">\r\n                                <div style={{\r\n                                    marginRight: '0.3em',\r\n                                    width: '12%'\r\n                                }}>\r\n                            {!message.isOwn && <div><img src={logo2} alt=\"oriental chat logo\"  height='35'  /></div> }\r\n                                </div>\r\n                                <div style={message.isOwn ? bubbleOwnContainerStyle : bubbleBotContainerStyle}>   \r\n                            <Bubble isOwn={message.isOwn} style={message.isOwn ? bubbleBotStyle : bubbleOwnStyle}>\r\n                                <MessageText>{message.message}</MessageText>\r\n                            </Bubble>\r\n                            {message.responseCard && showQuickReplies(message.responseCard)}\r\n                            </div>\r\n                        </Message> : <Spinner />\r\n                    ))\r\n                }\r\n                </MessageGroup> }\r\n            </MessageList>\r\n        </div>\r\n        <div style={{flexShrink: 0, padding:'5px 20px 15px 20px'}}>\r\n            <TextComposer >\r\n                <Row align=\"center\" >\r\n                    <Fill style={{\r\n                            alignSelf: 'flex-end',\r\n                            marginTop: '2px',\r\n                        }}>\r\n                        <textarea rows=\"3\" onKeyDown={handleKeyDown} className='text-area' aria-placeholder='Type a message' placeholder='Type a message' id=\"messageText\" name=\"messageText\" onChange={handleChange} />\r\n                    </Fill>\r\n                    <IconButton aria-label='send' fit>\r\n                        <SendIcon color='#661C69' style={{\r\n                width: '18px',\r\n                height: '16px',\r\n              }} onClick= {handleSendButtonClick} />\r\n                    </IconButton>\r\n                </Row>\r\n            </TextComposer>\r\n        </div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Maximized","D:\\Users\\co02047\\lex-ui-connect-demo\\lex-ui-connect-demo\\src\\components\\chat\\Minimized.js",["33","34"],"import * as React from 'react'\r\nimport { IconButton, ChatIcon } from '@livechat/ui-kit'\r\nimport widgetIcon from './widgetIcon.png';\r\n\r\nconst Minimized = ({ maximize }) => (\r\n\t<div\r\n\t\tonClick={maximize}\r\n\t\tstyle={{\r\n\t\t\tdisplay: 'flex',\r\n\t\t\talignItems: 'center',\r\n\t\t\tjustifyContent: 'center',\r\n\t\t\t// width: '60px',\r\n\t\t\t// height: '60px',\r\n\t\t\t// background: '#F5821F',\r\n\t\t\t// color: '#fff',\r\n\t\t\t// borderRadius: '50%',\r\n\t\t\tcursor: 'pointer',\r\n\t\t}}\r\n\t>\r\n\t\t{/* <IconButton color=\"#fff\" aria-label='chatbot'>\r\n\t\t\t<ChatIcon /> */}\r\n\t\t\t<img src={widgetIcon} alt='chatbot' tabindex=\"0\" />\r\n\t\t{/* </IconButton> */}\r\n\t</div>\r\n)\r\n\r\nexport default Minimized","D:\\Users\\co02047\\lex-ui-connect-demo\\lex-ui-connect-demo\\src\\components\\chat\\QuickReplies.js",[],"D:\\Users\\co02047\\lex-ui-connect-demo\\lex-ui-connect-demo\\src\\components\\spinner\\Spinner.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":51,"column":8,"nodeType":"41","endLine":51,"endColumn":18,"suggestions":"42"},{"ruleId":"39","severity":1,"message":"43","line":57,"column":8,"nodeType":"41","endLine":57,"endColumn":10,"suggestions":"44"},{"ruleId":"45","severity":1,"message":"46","line":2,"column":10,"nodeType":"47","messageId":"48","endLine":2,"endColumn":20},{"ruleId":"45","severity":1,"message":"49","line":2,"column":22,"nodeType":"47","messageId":"48","endLine":2,"endColumn":30},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'message'. Either include it or remove the dependency array.","ArrayExpression",["52"],"React Hook useEffect has missing dependencies: 'handleMessage' and 'messages.length'. Either include them or remove the dependency array. If 'handleMessage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["53"],"no-unused-vars","'IconButton' is defined but never used.","Identifier","unusedVar","'ChatIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},"Update the dependencies array to be: [message, messages]",{"range":"58","text":"59"},"Update the dependencies array to be: [handleMessage, messages.length]",{"range":"60","text":"61"},[1503,1513],"[message, messages]",[1661,1663],"[handleMessage, messages.length]"]